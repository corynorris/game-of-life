{"version":3,"sources":["constants.js","core/core.js","reducers/cells.js","reducers/interval.js","reducers/generations.js","reducers/index.js","components/Cell.jsx","components/Grid.jsx","actions/index.js","components/Button.jsx","components/Controls.jsx","components/Generation.jsx","App.js","index.js"],"names":["module","exports","GRID_HEIGHT","GRID_WIDTH","states","range","size","val","Array","fill","isAlive","grid","x","y","countNeighbours","startX","Math","max","startY","endX","min","length","endY","count","iy","ix","makeGrid","width","height","map","col","row","makeRandomGrid","i","floor","random","updateGrid","neighboursGrid","neighbours","startingCells","constants","cells","state","action","nextState","slice","type","intervalId","generations","gameOfLifeApp","combineReducers","interval","getClass","Cell","onCellClick","onClick","className","Grid","rows","this","props","key","bind","Component","connect","dispatch","spawnCell","Button","message","handleClick","Controls","onPlay","id","setInterval","onNextClick","onPlayClick","clearInterval","onRandomizeClick","onResetClick","ownProps","generation","App","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","render","document","getElementById"],"mappings":"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","file":"static/js/main.f81edf6b.chunk.js","sourcesContent":["module.exports = {\n  GRID_HEIGHT: 20,\n  GRID_WIDTH: 30,\n}","export const states = {\n  dead: 0,\n  alive: 1,\n  born: 2,\n}\n\nconst range = (size, val) => {\n  return Array(size).fill(val);\n}\n\nexport function isAlive(grid, x, y) {\n  return grid[y][x] !== states.dead;\n}\n\nexport function countNeighbours(grid, x, y) {\n  const startX = Math.max(x - 1, 0);\n  const startY = Math.max(y - 1, 0);\n  const endX = Math.min(x + 1, grid[0].length - 1);\n  const endY = Math.min(y + 1, grid.length - 1);\n  let count = 0;\n  for (let iy = startY; iy <= endY; iy++) {\n    for (let ix = startX; ix <= endX; ix++) {\n      if ((ix !== x || iy !== y) && isAlive(grid, ix, iy)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\nexport function makeGrid(width, height, val = 0) {\n  return range(height, val).map((col) => {\n    return range(width, val).map((row) => {\n      return val;\n    })\n  })\n}\n\nexport function makeRandomGrid(width, height, val = 0) {\n  const grid = makeGrid(width, height, val);\n  for (let i = 0; i < width * height * 0.2; i++) {\n    const x = Math.floor(Math.random() * width);\n    const y = Math.floor(Math.random() * height);\n    grid[y][x] = states.alive;\n  }\n  return grid;\n}\n\n\nexport function updateGrid(grid) {\n  const width = grid[0].length;\n  const height = grid.length;\n  let neighboursGrid = makeGrid(width, height, 0);\n\n\n\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      neighboursGrid[y][x] = countNeighbours(grid, x, y);\n    }\n  }\n\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      // Update born to alive\n      if (grid[y][x] === states.born) {\n        grid[y][x] = states.alive;\n      }\n\n      // Change behaviour based on neighbours      \n      const neighbours = neighboursGrid[y][x];\n      if (neighbours === 0 || neighbours === 1 || neighbours > 3) {\n        grid[y][x] = states.dead;\n      } else if (neighbours === 3 && grid[y][x] !== states.alive) {\n        grid[y][x] = states.born;\n      }\n\n    }\n  }\n  return grid;\n}","import {makeGrid, makeRandomGrid, updateGrid, states} from '../core/core.js';\nimport constants from '../constants';\n\nconst startingCells = makeRandomGrid(constants.GRID_WIDTH, \n                               constants.GRID_HEIGHT,\n                               0);\n\nconst cells  = (state = startingCells, action) => {\n  let nextState = state.slice(0);\n  switch (action.type) {\n    case 'MAKE_GRID':\n      return makeGrid(constants.GRID_WIDTH, constants.GRID_HEIGHT, 0)\n    case 'MAKE_RANDOM_GRID':\n      return makeRandomGrid(constants.GRID_WIDTH, constants.GRID_HEIGHT, 0);\n    case 'SPAWN_CELL':\n      nextState[action.y][action.x] = states.born;\n      return nextState;\n    case 'STEP_FORWARD':\n      return updateGrid(nextState);\n    default:\n      return state;\n  }\n}\n\nexport default cells","\nconst cells  = (state = 0, action) => {\n  switch (action.type) {\n    case 'PLAY':\n      return action.intervalId\n    default:\n      return state;\n  }\n}\n\nexport default cells","const generations  = (state = 0, action) => {\n  switch (action.type) {\n    case 'MAKE_GRID':\n    case 'MAKE_RANDOM_GRID':\n      return 0;\n    case 'STEP_FORWARD':\n      return state + 1;\n    default:\n      return state;\n  }\n}\n\nexport default generations","import {combineReducers } from 'redux'\nimport cells from './cells'\nimport interval from './interval'\nimport generations from './generations'\n\nconst gameOfLifeApp = combineReducers({\n  cells,\n  interval,\n  generations\n})\n\nexport default gameOfLifeApp;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Cell.css\";\n\nfunction getClass(state) {\n  switch (state) {\n    case 0:\n      return \"dead\";\n    case 1:\n      return \"alive\";\n    case 2:\n      return \"born\";\n    default:\n      return null;\n  }\n}\n\nconst Cell = ({ onCellClick, state }) => (\n  <td onClick={onCellClick} className={getClass(state)} />\n);\n\nCell.propTypes = {\n  onCellClick: PropTypes.func.isRequired,\n  state: PropTypes.number.isRequired\n};\n\nexport default Cell;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { spawnCell } from \"../actions\";\nimport PropTypes from \"prop-types\";\n\nimport Cell from \"./Cell\";\nimport \"./Grid.css\";\n\nclass Grid extends Component {\n  render() {\n    const rows = this.props.cells.map((row, y) => {\n      return (\n        <tr key={y}>\n          {row.map((state, x) => {\n            return (\n              <Cell\n                key={x}\n                state={this.props.cells[y][x]}\n                onCellClick={this.props.onCellClick.bind(this, x, y)}\n              />\n            );\n          })}\n        </tr>\n      );\n    });\n\n    return (\n      <table className=\"center\">\n        <tbody>{rows}</tbody>\n      </table>\n    );\n  }\n}\n\nGrid.propTypes = {\n  data: PropTypes.array\n};\n\nconst mapStateToProps = ({ cells }) => {\n  return {\n    cells\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onCellClick: (x, y) => {\n      dispatch(spawnCell(x, y));\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Grid);\n","export const makeGrid = () => {\n  return {\n    type: 'MAKE_GRID',\n  }\n}\n\nexport const makeRandomGrid = () => {\n  return {\n    type: 'MAKE_RANDOM_GRID',\n  }\n}\n\nexport const spawnCell = (x, y) => {\n  return {\n    type: 'SPAWN_CELL',\n    x,\n    y\n  }\n}\n\nexport const stepForward = () => {\n  return {\n    type: 'STEP_FORWARD',\n  }\n}\n\nexport const play = (intervalId) => {\n  return {\n    type: 'PLAY',\n    intervalId\n  }\n}\n\nexport const pause = () => {\n  return {\n    type: 'PAUSE',\n  }\n}","import React from \"react\";\n\nconst Button = ({ message, handleClick }) => {\n  return <button onClick={handleClick}>{message}</button>;\n};\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Button from \"./Button\";\nimport { stepForward, makeGrid, makeRandomGrid, play } from \"../actions\";\n\nclass Controls extends Component {\n  componentDidMount() {\n    this.onPlay();\n  }\n  onPlay() {\n    if (this.props.interval === 0) {\n      const id = setInterval(this.props.onNextClick, 200);\n      this.props.onPlayClick(id);\n    } else {\n      clearInterval(this.props.interval);\n      this.props.onPlayClick(0);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Button\n          message=\"randomize\"\n          handleClick={this.props.onRandomizeClick.bind(this)}\n        />\n        <Button\n          message=\"reset\"\n          handleClick={this.props.onResetClick.bind(this)}\n        />\n        <Button\n          message={this.props.interval ? \"pause\" : \"play\"}\n          handleClick={this.onPlay.bind(this)}\n        />\n        <Button\n          message=\"next\"\n          handleClick={this.props.onNextClick.bind(this)}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ interval }) => {\n  return {\n    interval\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onPlayClick: id => {\n      dispatch(play(id));\n    },\n    onResetClick: () => {\n      dispatch(makeGrid());\n    },\n    onNextClick: () => {\n      dispatch(stepForward());\n    },\n    onRandomizeClick: () => {\n      dispatch(makeRandomGrid());\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Controls);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nconst Generation = ({ generation }) => {\n  return <div>{generation}</div>;\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    generation: state.generations\n  };\n};\n\nexport default connect(mapStateToProps)(Generation);\n","import React, { Component } from 'react';\nimport Grid from './components/Grid';\nimport Controls from './components/Controls';\nimport Generation from './components/Generation';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"App-intro\">\n          The Game of Life\n        </h1>\n        <Grid />\n        <Controls />\n        <Generation />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","import React from 'react';\nimport {render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux'; \nimport gameOfLifeApp from './reducers'; \nimport App from './App';\nimport './index.css';\n\nlet store = createStore(gameOfLifeApp,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n\nrender(\n  <Provider store={store} >\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}